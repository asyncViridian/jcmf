RNA Motifs Process Notes

===============================================================================

Regions of interest:
    chr1:149,844,498-149,849,024 -
        genome.ucsc.edu/cgi-bin/hgTracks?db=hg38&lastVirtModeType=default&lastVirtModeExtraState=&virtModeType=default&virtMode=0&nonVirtPosition=&position=chr1%3A149844498-149849024&hgsid=725072751_CDa4000ZfjAIuAaUC6vmqIGOqYhD
    chr5:140,072,857-140,108,630 -
        http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg38&lastVirtModeType=default&lastVirtModeExtraState=&virtModeType=default&virtMode=0&nonVirtPosition=&position=chr5%3A140072857%2D140108630&hgsid=725074713_Dmj4c3zZn3vT3NSJGrQjYZVLzsbs
    chr12:62,602,752-62,622,213 +
        http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg38&lastVirtModeType=default&lastVirtModeExtraState=&virtModeType=default&virtMode=0&nonVirtPosition=&position=chr12%3A62602752%2D62622213&hgsid=725072751_CDa4000ZfjAIuAaUC6vmqIGOqYhD
    chr2:218,255,319-218,257,366 +
        http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg38&lastVirtModeType=default&lastVirtModeExtraState=&virtModeType=default&virtMode=0&nonVirtPosition=&position=chr2%3A218255319%2D218257366&hgsid=725074751_HUEhL9EESes7V284Qvcyo3fLpb4j

===============================================================================

Downloading the MAF files for alignment blocks using the UCSC browser:
01. Navigate to the UCSC genome browser. Any of the URLs in the "Regions of Interest" should work, or otherwise select the region of interest.
02. In the header bar, click Tools > Table Browser.
03. Configure: 
    group:"Comparative Genomics"
    track:"Conservation"
    table:"Multiz Align (multiz100way)"
        (Note that the old vertscan used multiz17way, but I am using multiz100way.)
    region:position
    output-format:MAF
04. Optionally, name the output file to save it directly to disk, or send output to some other web interface.

===============================================================================

A brief description of all of the executables in the scripts directory.
For all information about arguments or example usage for each of the scripts, you can look in the "Usage" section of this document, run the script without any arguments, or check the beginning of the script file itself.
    blockmerger.jar
        This jar executable generates the set of FASTA files and information graphs representing all the "merged blocks" originally from the given MAF file.
        It has a relatively complex set of arguments to specify source, destination, and various parameters (see usage section)
    refgenerator.jar
        This jar executable generates a BED track based on the MAF blocks in the input.
        The resulting track contains light/dark alternating blocks to represent each input MAF block. It does not contain any scoring or other processing. It is used as a reference line in the track hub.
    align.sh
        This script runs cmfinder with a set of arguments (listed within the script, or can be passed in as a type of argument using a settings file) on each of the FASTA files in the directory ./split relative to the current directory.
        It produces a set of folders containing the appropriate sorted output.
    score.sh
        This script scores each of the motifs (individual results and merged results both) that align.sh produces. It depends on the file structure that align.sh produces, and outputs several more directories. The actual scoring information is within ./scores, while extra produced files are moved to ./other
    listscores.sh
        This script generates some files that list all of the scores that score.sh calculated in order from least to greatest.
    trackgenerator.jar
        This jar executable generates a couple BED file tracks and information graphs from a set of score files.
        It has a relatively complex set of arguments to specify which score dir to use, as well as output files (see usage section)
    collectPNGs.sh
        This script collects all of the PNG-format images that blockmerger.jar, trackgenerator.jar, etc. generate and puts them all in one handy location.
    generateBigBed.sh
        This script performs all of the sorting and conversion work involved in converting a .bed file to a .bb file.
        Requires the utilities directory executables to be present.
    rerunMergeForDirs.sh
        This script performs the work of blockmerger.jar except it can handle larger batches of directories all at once (i.e. we have four directories to put things in, each with its own MAF file, and we all want them to have the same settings file for merge so all of them get 5 block block-merges). Requires the source_mafs folder, check the contents of the script to see how it maps directory names to source maf file.
    pagegenerator.jar
        This script creates a neatly-formatted HTML page to summarize the contents of a .score file that was generated by RNAPhylo.
    consensusoverlap.jar
        This jar executable generates a neatly-formatted HTML page that visualizes the relationship between multiple consensus motif structures that overlap.
    rerunTracksForDirs.sh
        This script performs the work of trackgenerator.jar, generateBigBed.sh, pagegenerator.jar, and collectPNGs.sh all at once. It creates a temp_(prefix) folder that contains several files and directories that can easily be assembled into a track hub directory. 
    runAll.sh
        This script runs all of the previous executables in order (for a single working directory at a time, NOT batch), so that I don't have to do it manually. Requires a source MAF file and a directory to dump all of the split, results, score, etc. directories inside, as well as a settings file to specify the variables to run each script with (i.e. use 5-block blockmerge, or 75-400 base fillblocks merge)

===============================================================================

My typical practical workflow: (see also the "To run the entire pipeline" sample code below)
01. Download the MAF file
02. Create the working directory (i.e. a directory named "q_chr01_emuBigscan_5block-10to3000-all")
    Note that the format matters. Check the contents of rerunMergeForDirs and rerunTracksForDirs to see what substrings they expect in a working directory name (typically some variant of chrXX at least)
03. To get CMfinder's result motifs and scores for each result from RNAphylo, run the runAll.sh script, like so (change out the parameters as appropriate, obviously):
    ./runAll.sh q_chr01_5block-10to3000-all/ source_mafs/chr5.maf settings/emuBigscan_5block
04. To aggregate these analyses and generate a trackhub-usable format, run rerunTracksForDirs.sh, like so (change params as appropriate):
    ./rerunTracksForDirs.sh q*emuBigscan_5block*
    If you don't want to manually enter the prefix argument once the script starts, you can run it less-interactively like so:
    echo "bigscan5" | ./rerunTracksForDirs.sh q*emuBigscan_5block*

===============================================================================

Generating the merged alignment block sequences (this is already handled by rerunMergeForDirs):
Run blockmerge, and pass the MAF file as "input filename".
    run blockmerge without arguments to get a description of the usage.
    This process creates a set of FASTA files, each of which is a set of input sequences consisting of multiple alignment blocks merged together. The sequences have their gap characters removed, and Ns are inserted for actual gaps between alignment blocks that must be bridged.
Alternatively, you can run ./rerunMergeForDirs to do this in batches.

TODO: explanation of the functionality blockmerge provides

===============================================================================

Generating the UCSC browser format track hub (this is already handled by rerunTracksForDirs):
01. Turn BED file into bigBed file so it can be integrated into the track hub.
    - see also http://genome.ucsc.edu/goldenPath/help/bigBed.html
    01. Sort the BED file (needs to be sorted on chrom and then chromStart)
        - use bedSort utility
    02. Remove any "track" or "browser" line from the BED file
    03. Convert the sorted BED file into a bigBed file
        - use http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.chrom.sizes as the chrom.sizes file
02. Create the reference score-file .txt and .txt.html files that are linked to by the trackDb file
    01. Copy over all of the score files of those motifs that were included in the final BED files into a (prefix)_src directory
    02. Run pagegenerator.jar -s (scorefile) for each of those files

===============================================================================

To run the entire pipeline on all of the configurations:

./runAll.sh q_chr01_emuBigscan_fblock-75to400-all/ source_mafs/m100_chr1_149844498-149849024.maf settings/emuBigscan_fblock-75to400 &
disown
./runAll.sh q_chr02_emuBigscan_fblock-75to400-all/ source_mafs/m100_chr2_218255319-218257366.maf settings/emuBigscan_fblock-75to400 &
disown
./runAll.sh q_chr05_emuBigscan_fblock-75to400-all/ source_mafs/m100_chr5_140072857-140108630.maf settings/emuBigscan_fblock-75to400 &
disown
./runAll.sh q_chr12_emuBigscan_fblock-75to400-all/ source_mafs/m100_chr12_62602752-62622213.maf settings/emuBigscan_fblock-75to400 &
disown
./runAll.sh q_chr01_emuBigscan_10block-10to3000-all/ source_mafs/m100_chr1_149844498-149849024.maf settings/emuBigscan_10block-10to3000 &
disown
./runAll.sh q_chr02_emuBigscan_10block-10to3000-all/ source_mafs/m100_chr2_218255319-218257366.maf settings/emuBigscan_10block-10to3000 &
disown
./runAll.sh q_chr05_emuBigscan_10block-10to3000-all/ source_mafs/m100_chr5_140072857-140108630.maf settings/emuBigscan_10block-10to3000 &
disown
./runAll.sh q_chr12_emuBigscan_10block-10to3000-all/ source_mafs/m100_chr12_62602752-62622213.maf settings/emuBigscan_10block-10to3000 &
disown
./runAll.sh q_chr01_emuBigscan_5block-10to3000-all/ source_mafs/m100_chr1_149844498-149849024.maf settings/emuBigscan_5block-10to3000 &
disown
./runAll.sh q_chr02_emuBigscan_5block-10to3000-all/ source_mafs/m100_chr2_218255319-218257366.maf settings/emuBigscan_5block-10to3000 &
disown
./runAll.sh q_chr05_emuBigscan_5block-10to3000-all/ source_mafs/m100_chr5_140072857-140108630.maf settings/emuBigscan_5block-10to3000 &
disown
./runAll.sh q_chr12_emuBigscan_5block-10to3000-all/ source_mafs/m100_chr12_62602752-62622213.maf settings/emuBigscan_5block-10to3000 &
disown
./runAll.sh q_chr01_newParams_5block-10to3000-all/ source_mafs/m100_chr1_149844498-149849024.maf settings/newParams_5block-10to3000 &
disown
./runAll.sh q_chr02_newParams_5block-10to3000-all/ source_mafs/m100_chr2_218255319-218257366.maf settings/newParams_5block-10to3000 &
disown
./runAll.sh q_chr05_newParams_5block-10to3000-all/ source_mafs/m100_chr5_140072857-140108630.maf settings/newParams_5block-10to3000 &
disown
./runAll.sh q_chr12_newParams_5block-10to3000-all/ source_mafs/m100_chr12_62602752-62622213.maf settings/newParams_5block-10to3000 &
disown

To run the entire null-model pipeline:

./runAllShuffleSISSIz.sh q_chs01_emuBigscan_fblock-75to400-all/ source_mafs/m100_chr1_149844498-149849024.maf settings/emuBigscan_fblock-75to400 &
disown
./runAllShuffleSISSIz.sh q_chs02_emuBigscan_fblock-75to400-all/ source_mafs/m100_chr2_218255319-218257366.maf settings/emuBigscan_fblock-75to400 &
disown
./runAllShuffleSISSIz.sh q_chs05_emuBigscan_fblock-75to400-all/ source_mafs/m100_chr5_140072857-140108630.maf settings/emuBigscan_fblock-75to400 &
disown
./runAllShuffleSISSIz.sh q_chs12_emuBigscan_fblock-75to400-all/ source_mafs/m100_chr12_62602752-62622213.maf settings/emuBigscan_fblock-75to400 &
disown
./runAllShuffleSISSIz.sh q_chs01_emuBigscan_10block-10to3000-all/ source_mafs/m100_chr1_149844498-149849024.maf settings/emuBigscan_10block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs02_emuBigscan_10block-10to3000-all/ source_mafs/m100_chr2_218255319-218257366.maf settings/emuBigscan_10block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs05_emuBigscan_10block-10to3000-all/ source_mafs/m100_chr5_140072857-140108630.maf settings/emuBigscan_10block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs12_emuBigscan_10block-10to3000-all/ source_mafs/m100_chr12_62602752-62622213.maf settings/emuBigscan_10block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs01_emuBigscan_5block-10to3000-all/ source_mafs/m100_chr1_149844498-149849024.maf settings/emuBigscan_5block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs02_emuBigscan_5block-10to3000-all/ source_mafs/m100_chr2_218255319-218257366.maf settings/emuBigscan_5block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs05_emuBigscan_5block-10to3000-all/ source_mafs/m100_chr5_140072857-140108630.maf settings/emuBigscan_5block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs12_emuBigscan_5block-10to3000-all/ source_mafs/m100_chr12_62602752-62622213.maf settings/emuBigscan_5block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs01_newParams_5block-10to3000-all/ source_mafs/m100_chr1_149844498-149849024.maf settings/newParams_5block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs02_newParams_5block-10to3000-all/ source_mafs/m100_chr2_218255319-218257366.maf settings/newParams_5block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs05_newParams_5block-10to3000-all/ source_mafs/m100_chr5_140072857-140108630.maf settings/newParams_5block-10to3000 &
disown
./runAllShuffleSISSIz.sh q_chs12_newParams_5block-10to3000-all/ source_mafs/m100_chr12_62602752-62622213.maf settings/newParams_5block-10to3000 &
disown

To collect regular-model results (wait until all the runAlls are done):

echo "-t blocks --numBlocksPerOutput 5" | ./rerunMergeForDirs.sh q*5block* &
echo "-t blocks --numBlocksPerOutput 10" | ./rerunMergeForDirs.sh q*10block* &
echo "-t fillblocks --minOutputLength 75 --maxOutputLength 400" | ./rerunMergeForDirs.sh q*fblock-75to400*&
wait
echo "Merge done"
echo bigscan10 | ./rerunTracksForDirs.sh q*emuBigscan_10block* &
echo bigscan5 | ./rerunTracksForDirs.sh q*emuBigscan_5block* &
echo bigscanf | ./rerunTracksForDirs.sh q*emuBigscan_fblock* &
echo newparam | ./rerunTracksForDirs.sh q*newParams* &
wait
echo "Trackgen done"
java -jar consensusoverlap.jar -s temp_bigscanf/bigscanf_src -c chr1 -o temp_bigscanf/bigscanf_chr1.html -l -pre bigscanf_src/ &
java -jar consensusoverlap.jar -s temp_bigscanf/bigscanf_src -c chr2 -o temp_bigscanf/bigscanf_chr2.html -l -pre bigscanf_src/ &
java -jar consensusoverlap.jar -s temp_bigscanf/bigscanf_src -c chr5 -o temp_bigscanf/bigscanf_chr5.html -l -pre bigscanf_src/ &
java -jar consensusoverlap.jar -s temp_bigscanf/bigscanf_src -c chr12 -o temp_bigscanf/bigscanf_chr12.html -l -pre bigscanf_src/ &
java -jar consensusoverlap.jar -s temp_bigscan5/bigscan5_src -c chr1 -o temp_bigscan5/bigscan5_chr1.html -l -pre bigscan5_src/ &
java -jar consensusoverlap.jar -s temp_bigscan5/bigscan5_src -c chr2 -o temp_bigscan5/bigscan5_chr2.html -l -pre bigscan5_src/ &
java -jar consensusoverlap.jar -s temp_bigscan5/bigscan5_src -c chr5 -o temp_bigscan5/bigscan5_chr5.html -l -pre bigscan5_src/ &
java -jar consensusoverlap.jar -s temp_bigscan5/bigscan5_src -c chr12 -o temp_bigscan5/bigscan5_chr12.html -l -pre bigscan5_src/ &
java -jar consensusoverlap.jar -s temp_bigscan10/bigscan10_src -c chr1 -o temp_bigscan10/bigscan10_chr1.html -l -pre bigscan10_src/ &
java -jar consensusoverlap.jar -s temp_bigscan10/bigscan10_src -c chr2 -o temp_bigscan10/bigscan10_chr2.html -l -pre bigscan10_src/ &
java -jar consensusoverlap.jar -s temp_bigscan10/bigscan10_src -c chr5 -o temp_bigscan10/bigscan10_chr5.html -l -pre bigscan10_src/ &
java -jar consensusoverlap.jar -s temp_bigscan10/bigscan10_src -c chr12 -o temp_bigscan10/bigscan10_chr12.html -l -pre bigscan10_src/ &
java -jar consensusoverlap.jar -s temp_newparam/newparam_src -c chr1 -o temp_newparam/newparam_chr1.html -l -pre newparam_src/ &
java -jar consensusoverlap.jar -s temp_newparam/newparam_src -c chr2 -o temp_newparam/newparam_chr2.html -l -pre newparam_src/ &
java -jar consensusoverlap.jar -s temp_newparam/newparam_src -c chr5 -o temp_newparam/newparam_chr5.html -l -pre newparam_src/ &
java -jar consensusoverlap.jar -s temp_newparam/newparam_src -c chr12 -o temp_newparam/newparam_chr12.html -l -pre newparam_src/ &
wait
echo "Overlap done"
rm -r trackHubUpdate &
rm temp_*/*_ref.b* &
rm temp_*/*.bed &
wait
mkdir trackHubUpdate
for file in temp_*/*.html
do
    mv ${file} trackHubUpdate/ &
done
for file in temp_*/*.bb
do
    mv ${file} trackHubUpdate/ &
done
for dir in temp_*/*_src
do
    mkdir trackHubUpdate/$(basename ${dir})
    mv ${dir}/* trackHubUpdate/$(basename ${dir})/
done
mkdir trackHubUpdate/other_info
for dir in temp_*/graphics/*/
do
    mkdir trackHubUpdate/other_info/$(basename ${dir})
    mv ${dir}/* trackHubUpdate/other_info/$(basename ${dir})/
done

===============================================================================
===============================================================================
                         
  _  _ ___ __ _ __ _ ___ 
 | || (_-</ _` / _` / -_)
  \_,_/__/\__,_\__, \___|
               |___/    arguments & usage of some of the more complex scripts:

===============================================================================
===============================================================================

TRACKGENERATOR.JAR

> java -jar trackgenerator.jar
Parsing failed. Reason: Missing required options: s, o
usage: TrackGenerator [options] -s <dirname> -o <filename>
 -h,--writeHeader             Include the header line
 -o,--outputDirectory <arg>   Output directory
 -s,--srcDir <arg>            Input score files directory

===============================================================================

REFLINEGENERATOR.JAR

> java -jar reflinegenerator.jar
Parsing failed. Reason: Missing required options: s, o
usage: RefLineGenerator [options] -s <filename> -o <filename>
 -h,--writeHeader    Include the header line
 -o,--outDir <arg>   Output directory
 -s,--srcMaf <arg>   Input MAF to make a reference for

===============================================================================

PAGEGENERATOR.JAR

> java -jar pagegenerator.jar
Parsing failed. Reason: Missing required option: s
usage: PageGenerator [options] -s <filename>
 -s,--srcFile <arg>   Input score file

===============================================================================

BLOCKMERGER.JAR

> java -jar blockmerger.jar
usage: BlockMerger [options] -s <filename> -o <fileprefix>
    --gapThreshold <arg>         Maximum gap length between two source
                                 alignment blocks before they are
                                 determined unmergeable. Defaults to 300
    --maxOutputLength <arg>      Maximum length of the reference genome
                                 section in a resulting block that will
                                 still allow the resulting block to be
                                 output. Defaults to 3000
    --minNumSpecies <arg>        Minimum number of species that are
                                 mergeable to include in each result
                                 alignment block. Defaults to 5
    --minOutputLength <arg>      Minimum length of the reference genome
                                 section in a resulting block that will
                                 still allow the resulting block to be
                                 output. Defaults to 10
    --numBlocksPerOutput <arg>   Number of source blocks to include in
                                 eachmerged block (if using block-counting
                                 merging). Defaults to 5
 -o,--outName <arg>              Output file prefix
 -od,--outDir <arg>              Directory to write output files to.
                                 Defaults to current directory
 -ot,--outType <arg>             'FASTA' to output FASTA file, 'MAF' to
                                 output MAF file. Defaults to FASTA
                                 format.
 -s,--srcName <arg>              Input MAF file
 -sd,--srcDir <arg>              Directory to read input files from.
                                 Defaults to current directory
 -t,--mergeType <arg>            'blocks' (fixed number of blocks per
                                 merge) or 'fillblocks' (contiguous blocks
                                 merged to within a range of merge lenghs)
                                 to determine the type of merge used (by
                                 default BlockMerger uses block-based
                                 merging).

===============================================================================

SISSIz 0.1.1

Usage: SISSIz [OPTIONS]... [FILE]

  -n, --num-samples    Number of alignments to be sampled
  -d, --di             Dinucleotide model (default)
  -i, --mono           Mononucleotide model
  -s, --simulate       Simulate only (no folding)
  -t, --tstv           Consider transitions transversion model
  -k, --kappa          Kappa (default: estimated from data)
  -p, --precision      Set precision of monunucleotide content
  -m, --num-regression Number of sampled points for regression
  -f, --flanks         Number of flanking 'buffer' sites
  -v, --verbose        More verbose screen output
  --dna, --rna         Print Ts (default) or Us
                     Output format
  --clustal            CLUSTAL W
  --maf                UCSC style MAF
  --fasta              Multiple FASTA separated by //
  -o, --outfile        Output file (default destination: stdout)
  -b, --print-tree     Print BIONJ-Tree to aln.tree
  -x, --print-rates    Print rates to rates.dat (debugging)
  -h, --help           Help screen
  -V, --version        Print version

===============================================================================

CMEMIT

# cmemit :: sample sequences from a covariance model
# INFERNAL 1.1.2 (July 2016)
# Copyright (C) 2016 Howard Hughes Medical Institute.
# Freely distributed under a BSD open source license.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Usage: cmemit [-options] <cmfile>

Basic options:
  -h     : show brief help on version and usage
  -o <f> : send sequence output to file <f>, not stdout
  -N <n> : generate <n> sequences  [10]
  -u     : write generated sequences as unaligned FASTA [default]  [default]
  -a     : write generated sequences as an alignment
  -c     : generate a single "consensus" sequence only
  -e <n> : embed emitted sequences within larger random sequences of length <n>
  -l     : local; emit from a locally configured model [default: global]

Options for truncating sequences:
  --u5p     : truncate unaligned sequences 5', choosing a random start posn
  --u3p     : truncate unaligned sequences 3', choosing a random end   posn
  --a5p <n> : truncate aln 5', start at match column <n> (use 0 for random posn)
  --a3p <n> : truncate aln 3', end   at match column <n> (use 0 for random posn)

Other options:
  --seed <n>      : set RNG seed to <n> [default: one-time arbitrary seed]  [0]
  --iid           : with -e, generate larger sequences as 25% ACGU (iid)
  --rna           : output as RNA sequence data  [default]
  --dna           : output as DNA sequence data
  --idx <n>       : start sequence numbering at <n>  [1]
  --outformat <s> : w/-a output alignment in format <s>  [Stockholm]
  --tfile <f>     : dump parsetrees to file <f>
  --exp <x>       : exponentiate CM probabilities by <x> before emitting
  --hmmonly       : emit from filter HMM, not from CM
  --nohmmonly     : always emit from CM, even for models with 0 basepairs

Alignment output formats (-a) include: Stockholm, Pfam, AFA (aligned FASTA), A2M, Clustal, PHYLIP

===============================================================================

CMALIGN

# cmalign :: align sequences to a CM
# INFERNAL 1.1.2 (July 2016)
# Copyright (C) 2016 Howard Hughes Medical Institute.
# Freely distributed under a BSD open source license.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Usage: cmalign [-options] <cmfile> <seqfile>

Basic options:
  -h     : show brief help on version and usage
  -o <f> : output the alignment to file <f>, not stdout
  -g     : configure CM for global alignment [default: local]

Options controlling alignment algorithm:
  --optacc   : use the Holmes/Durbin optimal accuracy algorithm  [default]
  --cyk      : use the CYK algorithm
  --sample   : sample alignment of each seq from posterior distribution
  --seed <n> : w/--sample, set RNG seed to <n> (if 0: one-time arbitrary seed)
  --notrunc  : do not use truncated alignment algorithm
  --sub      : build sub CM for columns b/t HMM predicted start/end points

Options controlling speed and memory requirements:
  --hbanded    : accelerate using CM plan 9 HMM derived bands  [default]
  --tau <x>    : set tail loss prob for HMM bands to <x>  [1e-7]  (1e-18<x<1)
  --mxsize <x> : set maximum allowable DP matrix size to <x> Mb  [1028.0]  (x>0.)
  --fixedtau   : do not adjust tau (tighten bands) until mx size is < limit
  --maxtau <x> : set max tau <x> when tightening HMM bands  [0.05]  (0<x<0.5)
  --nonbanded  : do not use HMM bands for faster alignment
  --small      : use small memory divide and conquer (d&c) algorithm

Optional output files:
  --sfile <f>  : dump alignment score information to file <f>
  --tfile <f>  : dump individual sequence parsetrees to file <f>
  --ifile <f>  : dump information on per-sequence inserts to file <f>
  --elfile <f> : dump information on per-sequence EL inserts to file <f>

Other options:
  --mapali <f>    : include alignment in file <f> (same ali that CM came from)
  --mapstr        : include structure (w/pknots) from <f> from --mapali <f>
  --noss          : cmbuild --noss option was used w/aln from --mapali <f>
  --informat <s>  : assert <seqfile> is in format <s>: no autodetection
  --outformat <s> : output alignment in format <s>  [Stockholm]
  --dnaout        : output alignment as DNA (not RNA) sequence data
  --noprob        : do not include posterior probabilities in the alignment
  --matchonly     : include only match columns in output alignment
  --ileaved       : force output in interleaved Stockholm format
  --regress <f>   : save regression test data to file <f>
  --verbose       : report extra information; mainly useful for debugging
  --cpu <n>       : number of parallel CPU workers to use for multithreads  (n>=0)

Sequence input formats:   FASTA, GenBank
Alignment output formats: Stockholm, Pfam, AFA (aligned FASTA), A2M, Clustal, PHYLIP

===============================================================================

CMFINDER04.PL

Options:
    -c <number>
     The maximum number of candidates in each sequence. Default 40. No bigger than 100.
    -m <number>
     The minimum length of candidates. Default 30
        (NOTE: THIS ARG DOES NOT ACTUALLY EXIST)
    -M <number>
     The maximum length of candidates. Default 100
        (NOTE: THIS ARG DOES NOT ACTUALLY EXIST)
    -f <number>
     The fraction of the sequences expected to contain the motif. Default 0.80
    -s1 <number>
     The max number of output single stem-loop motifs
    -s2 <number>
     The max number of output double stem-loop motifs
    -minspan1 <number>
     minimum span of a candidate sub-sequence in the heuristics to come up with an initial alignment for single-hairpin (h1) motifs
    -maxspan1 <number>
     like -minspan1, but maximum
    -minspan2 <number>
     like -minspan1, but for double-hairpin (h2) motifs
    -maxspan2 <number>
     like -minspan2, but maximal
    -combine
     Combine the output motifs. Default False
    -motifList <file>
     Produce a list of motifs generated, one motif per line.
    -o <number>
     Minimum overlap for combining motifs
    -n <number>
     Minimum number of sequences (weighted) for combining motifs
    -emSeq <file>
     Use the sequences in this fasta file for the expectation maximization step (i.e., the C executable cmfinder), but not for the earlier steps related to finding candidate motifs.  The reason for this distinction is that it is somewhat easier to add weighting to the cmfinder program, than the various canda, candf, cands and align programs.
    -likeold
     Behave as much as possible like the old CMfinder, e.g., passing --enone, --p56 and --degen-rand to cmfinder_inf11.  It's not possible to produce identical results to CMfinder 0.3, but these flags make it more similar.
    -fragmentary
     Pass --fragmentary for cmfinder
    -amaa
     Pass --amaa to cmfinder (align max align accuracy)
    -useOldCmfinder
     Run the old cmfinder executable, mainly to test whether we get different results because of this perl script, or the cmfinder_inf11 executable.
    -skipClustalw
     Do not run clustalw, like older installations lacking this program.
    -justGetCmfinderCommand
     Print the command to run for the cmfinder executable, with appropriate partial flags.  This can be used to realign an existing .sto file, for example.
    -copyCmfinderRunsFromLog <log-file>
     For debugging.  Reads a log file that contains cmfinder commands, and re-runs them with new CMfinder.
    -commaSepEmFlags x<flags>
     List of flags and arguments to pass to the EM-step cmfinder exe.  There's an 'x' at the beginning of the flags, so that perl doesn't interpret the flags as flags for it.  It's comma-separated where on the command line it would be space separated.  I think commas are safe, and mean that I don't have to worry about quoting stuff.  e.g., -commaSepEmFlags x--fragmentary,--filter-non-frag,--filter-non-frag-pad,10 would pass this to the cmfinder program: "--fragmentary --filter-non-frag --filter-non-frag-pad 10", i.e., just replace commas with spaces.
    -commaSepSummarizeFlags x<flags>
     Flags to pass to the --summarize command.  Same syntax as for --commaSepEmFlags
    -commaSepCandfFlags x<flags>
     Flags to pass to the candf command.  Same syntax as for --commaSepEmFlags
    -minCandScoreInFinal <number>
     Pass --min-cand-score-in-final <number> to cmfinder.  WARNING: there's a difference between using this flag (where even intermediate motifs will avoid these hits) and taking the low-scoring instances out of the final alignments (which might be combinations of motifs in which the sequence would have been lower-scoring).
    -filterNonFrag
     Pass --filter-non-frag to cmfinder
    -columnOnlyBasePairProbs
     Pass --column-only-base-pair-probs to cmfinder
    -saveTimer <file>
     create tab-delimited <file> containing timing stats on various sub-processes of this script.  the first tab-delimited field is the description of the sub-process, the second field is the total CPU time (user+sys) and the third field is the wall-clock time.  Sub-processes can occur in multiple lines if they are run multiple timers, so the caller should add them.  Due to my laziness, the time of the clustalw program (if used) is not counted.
    -cpu <num>
     use <num> CPUs for functionality that can use multi-CPUs (currently only the internal cmsearch commands in cmfinder04)
    -allCpus
     equivalent to -cpu X , where X is the number of available processors.
    -candsParallel
     run the two cands jobs in parallel, even if -cpu 1
    -outFileSuffix <string>
     add <string> to the output file names.  this is useful if you want to run the script in multiple ways in the same directory.
    -h
     Show this list
    -version
     Show package version

===============================================================================

RNAPHYLO

Usage: RNAphylo [options] <alignment>
       where options are:
       -h : Print this help
       --version : print version
       -t <phylo_tree> : The phylogeny tree
       -s <model_file> : The phylogenetic model for single bases
       -p <model_file> : The phylogenetic model for paired bases
       -g <grammar_file>: The SCFG grammar file.
       --l  <float> : The lower bound for paired emission probability to be interesting
       --partition : Use partition function
       --informat <format> : The format of input alignment
       --degen-is-absent : model degenerate nucleotides as absent
       --fragmentary : model fragmentary (or equivalently truncated) sequences (implies --degen-is-absent)
       --only-ss-cons : only allow emission of base pairs in SS_cons (to test this aspect of --fragmentary)
       --gap-thresh <fraction> : gap threshold for removing columns.  --gap-thresh 1 means retain all columns.  Default: 0.7
       --partition-close-to-fuzzy-limit <int>: "fuzzy" nucleotide positions are those that are on the edge of a truncation, or have a suspicious number of degenerate nucleotides (see --suspicious-degen-nucs).  When a nucleotide is within <int> nucleotides of a fuzzy position, the partition function cannot be calculated on it, as if the nucleotide were absent.  This flag is meaningless unless --partition is also used. A value of -1 disables this feature. Default: -1.  Recommend 3 if you use it.
       --suspicious-degen-nucs <int> : when there are <int> or more consecutive degenerate nucleotides they are considered suspicious (see --partition-close-to-fuzzy-limit) Default: 2.
       --ignore-all-gap : don't complain about alignments containing columns with no nucleotides
       --version : print version number and exit

===============================================================================

CMFINDER04

Usage: cmfinder04 [options] <input-sto-file>
OR --summarize [options] <input-sto-file>

Basic options:
  -h        : show brief help on version and usage
  -a <f>    : input alignment file (.sto)
  -o <f>    : output alignment file (.sto)
  --version : show version

General cmfinder options:
  --degen-rand                    : randomize degenerate nucs like CMfinder 0.3
  --degen-keep                    : keep degenerate nucs and marginalize  [default]
  --fragmentary                   : allow truncated hits (independent of --degen-X, unlike pscore)
  --non-frag-avg-bppr             : ignore --fragmentary for calculating average base pair probs
  --wgsc                          : use GSC alg to weight sequences for redundancy
  --wpb                           : use PB alg to weight sequences for redundancy
  --ints-like-03                  : use ints for mutual info and partition func, like CMfinder 0.3 did
  --min-seq-weight <x>            : eliminate seqs from MSA whose TCM weight is below this value  [0.01]
  --no-elim-iden-seq              : don't eliminate identical sequences as candidate members
  --no-elim-iden-subseq           : don't eliminate identical sub-sequences of other sequences as candidate members
  --allow-untested-code           : run code that was never exercized in tests; don't abort to allow testing
  --min-cand-score-in-final <x>   : min cmsearch score to put a seq into the saved MSA.  [0]
  --bg-score-size <n>             : create this many randomized seqs for each input seq to get background score, below which candi                                                         dates are rejected  [0]
  --bg-score-evalue <x>           : try to get an EVD from --bg-score-size, and apply this E-value  [-1]
  --bg-score-scan-thresh <x>      : bitscore threshold (-T in cmsearch) to use for scanning --bg-score-size data.  [0]
  --bg-score-non-frag             : prevent --bg-score-size scans from using fragmentary modes -- force --nontrunc
  --filter-non-frag               : first run cmsearch with --notrunc, then run normal cmsearch only on the hits from --notrunc
  --filter-non-frag-pad <n>       : with --filter-non-frag, add this many nucs on 5' and 3' side of the non-frag hits  [20]
  --max-degen-per-hit <n>         : eliminate hits with this many degen nucs or more
  --max-degen-flanking-nucs <n>   : consider this many nucs beyond the 5' and 3' ends of each hit in counting degen nucs for --max                                                         -degen-per-hit
  --bad-distal-pairs-to-loop      : shift non-canon pairs in distal part of stems to the terminal loop
  --bad-distal-pairs-to-loop-only : just run the input msa (-a flag) thru --bad-distal-pairs-to-loop-test and save to output msa (                                                         -o flag)
  --min-term-loop-nucs <n>        : only with --bad-distal-pairs-to-loop, move even good base pairs into loop if there are fewer t                                                         han this many nucs in term loop.  But leave it alone if bp is truncated (with --fragmentary)
  --seed <n>                      : set random number generator's seed to <n>  [0]  (n>=0)
  --evalue <x>                    : use this E-value in ScanCand, in addition to a threshold (note: implies running internal cmcal                                                         ibrate, which will be very slow)
  --create-file-on-success <f>    : create this file, empty, upon successful completion of the program, for convenience elsewhere
  --save-after-first-M-step       : for debugging.  program exits after saving the file
  --save-in-progress              : for debugging, save MSA's as we processed
  --timer-append <f>              : append timing stats to tab-delimited file

options related to internal cmcalibrate/cmsearch:
  --tailn <n> : pass --gtailn or --ltailn as appropriate to cmcalibrate (default: accept cmcalibrate's default)
  --local     : local mode, i.e. don't pass -g to internal cmsearch
  --noF4F5    : set --noF4 and --noF5 (env def) to avoid glocal hmm
  --max       : pass --max to cmsearch (and skip calibrations in cmbuild)
  --amaa      : use maximal-alignment accuracy in cmsearch, i.e. don't pass --acyk
  --cpu <n>   : pass to internal cmsearch/cmcalibrate.  --cpu -1 means use all CPUs (default is --cpu 0, which is single-threaded)                                                           [0]  (n>=-1)

options related to internal cmbuild:
  --p56       : use the default prior from Infernal v0.56 through v1.0.2
  --prior <f> : read priors from file <f>
  --eent      : adjust eff seq # to achieve relative entropy target  [default]
  --enone     : no effective seq # weighting: just use nseq
  --EmN <n>   : number of sampled seqs to use for p7 local MSV calibration  [200]  (n>0)
  --EvN <n>   : number of sampled seqs to use for p7 local Vit calibration  [200]  (n>0)
  --ElfN <n>  : number of sampled seqs to use for p7 local Fwd calibration  [200]  (n>0)
  --EgfN <n>  : number of sampled seqs to use for p7 glocal Fwd calibration  [200]  (n>0)

options for --summarizea:
  --summarize              : perform functionality like 'summarize' program.  commandline has the .sto file
  --summarize-gsc          : use GSC alg weighting for --summarize
  --summarize-save-msa <f> : save MSA used by --summarize, for debugging modifications on loading

===============================================================================

CMBUILD

Usage: cmbuild [-options] <cmfile_out> <msafile>

where basic options are:
  -h        : show brief help on version and usage
  -n <s>    : name the CM(s) <s>, (only if single aln in file)
  -F        : force; allow overwriting of <cmfile_out>
  -o <f>    : direct summary output to file <f>, not stdout
  -O <f>    : resave consensus/insert column annotated MSA to file <f>
  --devhelp : show list of otherwise hidden developer/expert options

To see more help on available options, do ./../utilities/cmbuild -h
